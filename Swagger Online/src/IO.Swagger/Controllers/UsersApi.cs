/*
 * ICATU - API Clientes
 *
 * API desenvolvida como um desafio para avançar no processo de seleção da ICATU. Esta API tem o objetivo de disponibilizar o CRUD de clientes e o CRUD de Endereços.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: renancerqueira@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class UsersApiController : Controller
    { 
        /// <summary>
        /// Cadastrar clientes
        /// </summary>
        /// <remarks>Cadastra um novo cliente no banco de dados</remarks>
        /// <param name="cliente">Objeto do tipo &#39;Cliente&#39; a ser cadastrado</param>
        /// <response code="201">Cliente cadastrado com sucesso</response>
        /// <response code="404">Objeto inválido. Verifique os dados enviados.</response>
        /// <response code="409">Este cliente já se encontra cadastrado em nosso banco de dados</response>
        [HttpPost]
        [Route("/RC-Systems/ICATU-Costumer/1.0.0/clientes")]
        [ValidateModelState]
        [SwaggerOperation("Create")]
        public virtual IActionResult Create([FromBody]Cliente cliente)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletar clientes
        /// </summary>
        /// <remarks>Deleta um cliente pelo seu Id</remarks>
        /// <param name="id">Id do cliente a ser deletado</param>
        /// <response code="200">Cliente deletado com sucesso</response>
        /// <response code="404">Nenhum cliente encontrado</response>
        [HttpDelete]
        [Route("/RC-Systems/ICATU-Costumer/1.0.0/clientes")]
        [ValidateModelState]
        [SwaggerOperation("Delete")]
        public virtual IActionResult Delete([FromRoute][Required]Guid? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Retorna os dados dos clientes
        /// </summary>
        /// <remarks>Retorna os dados dos clientes pelo Id ou pelo nome</remarks>
        /// <param name="search">Passeo Id do cliente desejado para retornar seus dados. Passe o nome completo, ou parte dele, para retornar todos os clientes que correspondem.</param>
        /// <param name="page">Paginação - Número da página desejada</param>
        /// <param name="length">Paginação - Número da quantidade de registros desejados na página</param>
        /// <response code="200">Clientes encontrados</response>
        /// <response code="404">Nenhum cliente encontrado</response>
        [HttpGet]
        [Route("/RC-Systems/ICATU-Costumer/1.0.0/clientes")]
        [ValidateModelState]
        [SwaggerOperation("Read")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Cliente>), description: "Clientes encontrados")]
        public virtual IActionResult Read([FromRoute][Required]string search, [FromQuery]int? page, [FromQuery]int? length)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Cliente>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "[ {\n  \"idade\" : 31,\n  \"endereco\" : {\n    \"cidade\" : \"Rio de Janeiro\",\n    \"estado\" : \"Rio de Janeiro\",\n    \"logradouro\" : \"Praça Vinte e Dois de Abril, 36\",\n    \"bairro\" : \"Centro\"\n  },\n  \"cpf\" : {\n    \"numero\" : \"12345678911\"\n  },\n  \"nome\" : \"Maria José\",\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"cadastradoEm\" : \"2019-06-21T13:47:28\"\n}, {\n  \"idade\" : 31,\n  \"endereco\" : {\n    \"cidade\" : \"Rio de Janeiro\",\n    \"estado\" : \"Rio de Janeiro\",\n    \"logradouro\" : \"Praça Vinte e Dois de Abril, 36\",\n    \"bairro\" : \"Centro\"\n  },\n  \"cpf\" : {\n    \"numero\" : \"12345678911\"\n  },\n  \"nome\" : \"Maria José\",\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"cadastradoEm\" : \"2019-06-21T13:47:28\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Cliente>>(exampleJson)
            : default(List<Cliente>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Atualizar clientes
        /// </summary>
        /// <remarks>Atualiza os dados desejados de um cliente</remarks>
        /// <param name="cliente">Objeto do tipo &#39;Cliente&#39; com os dados a serem atualizados</param>
        /// <response code="204">Cliente atualizado com sucesso</response>
        /// <response code="404">Nenhum cliente encontrado</response>
        [HttpPut]
        [Route("/RC-Systems/ICATU-Costumer/1.0.0/clientes")]
        [ValidateModelState]
        [SwaggerOperation("Update")]
        public virtual IActionResult Update([FromBody]Cliente cliente)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }
    }
}
